# CheckDisk formatter
# Colorizes and bolds text generated by the 'check_disk' NRPE check.

module NagiosHerald
  class Formatter
    class CheckLogstash < NagiosHerald::Formatter
      include NagiosHerald::Logging

      def get_logstash_results(query)
        begin
          logstash_helper = NagiosHerald::Helpers::LogstashQuery.new
          logstash_helper.query(query)
        rescue Exception => e
          logger.error "Exception encountered retrieving Logstash Query - #{e.message}"
          e.backtrace.each do |line|
            logger.error "#{line}"
          end
          return []
        end
      end
      # Public: Overrides Formatter::Base#additional_info.
      # Calls on methods defined in this class to generate stack bars and download
      # Ganglia graphs.
      #
      # Returns nothing. Updates the formatter content hash.
      def additional_info
        section = __method__  # this defines the section key in the formatter's content hash
        service_output = get_nagios_var("NAGIOS_SERVICECHECKCOMMAND")
        command_components =  parse_command(service_output)
        results = get_logstash_results(command_components[:query])

        html_output = generate_html_output(results["hits"]["hits"])

        add_html(section, html_output)
      end

      # Public: Overrides Formatter::Base#additional_details.
      # Calls on methods defined in this class to colorize and bold the `df` output
      # generated by the check_disk NRPE check.
      #
      # Returns nothing. Updates the formatter content hash.
      def additional_details

      end

      private

      def parse_command(service_command)
        command_components = service_command.split("!")
        {
          :command => command_components[0],
          :query => command_components[1],
          :warn_threshold => command_components[2],
          :crit_threshold => command_components[3],
          :time_perdiod => command_components[4]
        }
      end

      def generate_html_output(results)
        output_prefix = "<table>"
        output_suffix = "</table>"

        headers = "<tr>#{results.first["_source"].keys.map{|h|"<th>#{h}</th>"}.join}</tr>"
        result_values = results.map{|r|r["_source"]}

        body = result_values.map{|r| "<tr>#{r.map{|k,v|"<td>#{v}</td>"}.join}</tr>"}.join

        output_prefix + headers + body + output_suffix
      end
    end
  end
end
